name: Chain Deployment Pipeline

on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      promote_to_staging:
        description: 'Promote to staging'
        required: true
        default: 'false'
        type: boolean
      promote_to_prod:
        description: 'Promote to production'
        required: true
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build JAR with Maven
      run: mvn clean install

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }} .

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Dev
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}
          docker stop springboot-app || true
          docker rm springboot-app || true
          docker run -d -p 8484:8484 --name springboot-app ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}

  test-dev:
    needs: deploy-dev
    runs-on: ubuntu-latest
    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Test Dev Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:8484/hello)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Dev health check passed"
        else
          echo "‚ùå Dev health check failed"
          exit 1
        fi

  promote-to-staging:
    needs: test-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Create Staging Branch and PR
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create staging branch from current dev
        git checkout -b staging-promotion-${{ github.sha }}
        git push origin staging-promotion-${{ github.sha }}
        
        # Create PR to staging
        gh pr create --base staging --head staging-promotion-${{ github.sha }} \
          --title "üöÄ Auto-promote dev to staging" \
          --body "## Dev ‚Üí Staging Promotion
          
          ‚úÖ Dev tests passed
          ‚úÖ Health checks successful
          
          **Changes:**
          - SHA: ${{ github.sha }}
          - Branch: dev
          - Tested on: ${{ secrets.EC2_HOST }}:8484
          
          **Ready for staging deployment**" \
          --label "auto-promotion,staging-ready"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    needs: test-dev
    runs-on: ubuntu-latest
    if: github.event.inputs.promote_to_staging == 'true' || (github.ref == 'refs/heads/staging' && github.event_name == 'push')
    steps:
    - name: Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST_STAGING }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}
          docker stop springboot-app || true
          docker rm springboot-app || true
          docker run -d -p 8484:8484 --name springboot-app ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}

  test-staging:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event.inputs.promote_to_staging == 'true' || (github.ref == 'refs/heads/staging' && github.event_name == 'push')
    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Test Staging Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST_STAGING }}:8484/hello)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Staging health check passed"
        else
          echo "‚ùå Staging health check failed"
          exit 1
        fi

    - name: Test Staging Status Endpoint
      run: |
        response=$(curl -s http://${{ secrets.EC2_HOST_STAGING }}:8484/status)
        if [[ $response == *"Staging"* ]]; then
          echo "‚úÖ Staging status check passed: $response"
        else
          echo "‚ùå Staging status check failed"
          exit 1
        fi

  promote-to-production:
    needs: test-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Create Production Branch and PR
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create production branch from current staging
        git checkout -b production-promotion-${{ github.sha }}
        git push origin production-promotion-${{ github.sha }}
        
        # Create PR to main (production)
        gh pr create --base main --head production-promotion-${{ github.sha }} \
          --title "üöÄ Auto-promote staging to production" \
          --body "## Staging ‚Üí Production Promotion
          
          ‚úÖ Dev tests passed
          ‚úÖ Staging tests passed
          ‚úÖ Health checks successful
          
          **Changes:**
          - SHA: ${{ github.sha }}
          - Branch: staging
          - Tested on: ${{ secrets.EC2_HOST_STAGING }}:8484
          
          **Ready for production deployment**" \
          --label "auto-promotion,production-ready"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    needs: promote-to-production
    runs-on: ubuntu-latest
    if: github.event.inputs.promote_to_prod == 'true'
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST_PROD }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}
          docker stop springboot-app || true
          docker rm springboot-app || true
          docker run -d -p 8484:8484 --name springboot-app ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}

  notify-success:
    needs: [deploy-dev, test-dev, promote-to-staging]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/dev'
    steps:
    - name: Dev Deployment Summary
      run: |
        echo "üéâ Dev Deployment Summary"
        echo "========================"
        echo "‚úÖ Dev: http://${{ secrets.EC2_HOST }}:8484"
        echo "üìù Staging promotion PR created"
        echo "‚è≥ Awaiting staging approval"

  notify-staging-success:
    needs: [deploy-staging, test-staging, promote-to-production]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/staging'
    steps:
    - name: Staging Deployment Summary
      run: |
        echo "üéâ Staging Deployment Summary"
        echo "============================"
        echo "‚úÖ Staging: http://${{ secrets.EC2_HOST_STAGING }}:8484"
        echo "üìù Production promotion PR created"
        echo "‚è≥ Awaiting production approval"