name: Chain Deployment Pipeline

on:
  push:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      promote_to_prod:
        description: 'Promote to production'
        required: true
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build JAR with Maven
      run: mvn clean install

    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }} .

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST_STAGING }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}
          docker stop springboot-app || true
          docker rm springboot-app || true
          docker run -d -p 8484:8484 --name springboot-app ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}

  test-staging:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Test Staging Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST_STAGING }}:8484/hello)
        if [ $response -eq 200 ]; then
          echo "‚úÖ Staging health check passed"
        else
          echo "‚ùå Staging health check failed"
          exit 1
        fi

    - name: Test Staging Status Endpoint
      run: |
        response=$(curl -s http://${{ secrets.EC2_HOST_STAGING }}:8484/status)
        if [[ $response == *"Staging"* ]]; then
          echo "‚úÖ Staging status check passed: $response"
        else
          echo "‚ùå Staging status check failed"
          exit 1
        fi

  auto-promote:
    needs: test-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Create Pull Request to Main
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: auto-promote-${{ github.sha }}
        base: main
        title: "üöÄ Auto-promote staging to production"
        body: |
          ## Automated Promotion
          
          ‚úÖ Staging tests passed
          ‚úÖ Health checks successful
          
          **Changes:**
          - SHA: ${{ github.sha }}
          - Branch: staging
          - Tested on: ${{ secrets.EC2_HOST_STAGING }}:8484
          
          **Ready for production deployment**
        labels: |
          auto-promotion
          production-ready

  deploy-production:
    needs: test-staging
    runs-on: ubuntu-latest
    if: github.event.inputs.promote_to_prod == 'true' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}
          docker stop springboot-app || true
          docker rm springboot-app || true
          docker run -d -p 8484:8484 --name springboot-app ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}

  notify-success:
    needs: [deploy-staging, test-staging, auto-promote]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Deployment Summary
      run: |
        echo "üéâ Chain Deployment Summary"
        echo "=========================="
        echo "‚úÖ Staging: http://${{ secrets.EC2_HOST_STAGING }}:8484"
        echo "üìù Auto-promotion PR created"
        echo "‚è≥ Awaiting production approval"